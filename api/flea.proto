syntax = "proto3";

package api;


import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "repository.proto";  // For HealthCheck and Config messages.

message ModifyTaskRequest {
   string taskId = 1;   // Auto-populated from endpoint URL
   google.protobuf.Timestamp deadline = 2;  // In UTC seconds since epoch
   bool active = 3;
}

message ListTasksRequest {
    string modelId = 1;            // If missing, return all tasks for all models
    string hyperparametersId = 2;  // If present, modelId must be present
    string checkpointId = 3;       // If present, hyperparametersId must be present
    // Tasks are returned lexicographically sorted by taskId
    // If specified only taskIds >= startTaskId will be returned.
    string startTaskId = 4;
    int32 maxItems = 5;
    bool includeInactive = 6;
}

message ListTasksResponse {
    string startTaskId = 1;
    int32 maxItems = 2;
    // Map from taskId to resourcePath for checkpoint.
    // e.g. { "1001" : "/models/modelABC/hyperparameters/hpset13/checkpoints/chkpt-7",
    //        "1007" : "/models/modelXYZ/hyperparameters/hpset4/checkpoints/chkpt-3" }
    // Flea will accept updates based on the specified or later checkpoints.
    map<string, string> tasks = 3; 
    string repositoryBaseUrl = 4;   // Base URL to be prepended to resourcePath-s
}

message GetTaskRequest {
    string taskId = 1;  // Auto-populated from endpoint URL
}

// This is used by both /create_task, /task/<taskId> and /modify_task/<taskId>
message TaskDetails {
    string modelId = 1;
    string hyperparametersId = 2;
    string checkpointId = 3;  // We would also accept updates based on more recent checkpoints.
    google.protobuf.Timestamp deadline = 4;       // UTC seconds since epoch when task expires
    string taskId = 5;
    bool active = 6;
    string taskSpec = 7;  // URL to download task details
}

message StartTaskRequest {
   string taskId = 1;  // Auto-populated from endpoint URL
}

message StartTaskResponse {
   enum RequestStatus {
   	UNKNOWN = 0;
	REJECTED = 1;
	APPROVED = 2;
   }
   RequestStatus status = 1;
   string jobId = 2;
   string uploadTo = 3;  // URL to upload task output
}

service Flea {
    rpc Healthz (HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/v1/flea/healthz"
        };
    };
    rpc Config (ConfigRequest) returns (ConfigResponse) {
        option (google.api.http) = {
            get: "/v1/flea/config"
        };
    };

    // Task creator API/Flow:

    rpc CreateTask (TaskDetails) returns (TaskDetails) {
        option (google.api.http) = {
            post: "/v1/flea/create_task"
            body: "*"
        };
    };
    rpc ModifyTask (ModifyTaskRequest) returns (TaskDetails) {
        option (google.api.http) = {
            post: "/v1/flea/modify_task/{taskId}"
            body: "*"
        };
    };

    // Task doer API/Flow:

    rpc ListTasks (ListTasksRequest) returns (ListTasksResponse) {
        option (google.api.http) = {
            get: "/v1/flea/tasks"
        };
    };
    rpc GetTask (GetTaskRequest) returns (TaskDetails) {
        option (google.api.http) = {
            get: "/v1/flea/tasks/{taskId}"
        };
    };
    rpc StartTask (StartTaskRequest) returns (StartTaskResponse) {
        option (google.api.http) = {
            get: "/v1/flea/start_task/{taskId}"
        };
    };
}
