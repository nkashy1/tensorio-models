syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";


/**
 * Health checks inspired by the conventions here:
 * https://github.com/grpc/grpc/blob/master/doc/health-checking.md
 * (although they do not follow that protocol exactly)
 *
 * Exposed using the Healthz method on the Repository service.
 */
message HealthCheckRequest {
    string service = 1;
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

message ConfigRequest {
}

message ConfigResponse {
    enum BackendType {
        INVALID = 0;
        MEMORY = 1;
        GOOGLE_CLOUD_STORAGE = 2;
    }
    BackendType backendType = 1;
}

message Model {
    string modelId = 1;
    string details = 2;
    string canonicalHyperparameters=3;
}

message ListModelsRequest {
    string marker = 1;
    int32 maxItems = 2;
}

message ListModelsResponse {
    repeated string modelIds = 1;
}

message CreateModelRequest {
    Model model = 1;
}

message CreateModelResponse {
    string resourcePath = 1;
}

message GetModelRequest {
    string modelId = 1;
}

message GetModelResponse {
    Model model = 1;
}

message UpdateModelRequest {
    string modelId = 1;
    Model model = 2;
}

message UpdateModelResponse {
    Model model = 1;
}

message ListHyperparametersRequest {
    string modelId = 1;
    string marker = 2;
    int32 maxItems = 3;
}

message ListHyperparametersResponse {
    string modelId = 1;
    repeated string hyperparametersIds = 2;
}

message CreateHyperparametersRequest {
    string modelId = 1;
    string hyperparametersId = 2;
    string canonicalCheckpoint = 3;
    map<string, string> hyperparameters = 4;
}

message CreateHyperparametersResponse {
    string resourcePath = 1;
}

message GetHyperparametersRequest {
    string modelId = 1;
    string hyperparametersId = 2;
}

message GetHyperparametersResponse {
    string modelId = 1;
    string hyperparametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperparameters = 5;
}

message UpdateHyperparametersRequest {
    string modelId = 1;
    string hyperparametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperparameters = 5;
}

message UpdateHyperparametersResponse {
    string modelId = 1;
    string hyperparametersId = 2;
    string upgradeTo = 3;
    string canonicalCheckpoint = 4;
    map<string, string> hyperparameters = 5;
}

message ListCheckpointsRequest {
    string modelId = 1;
    string hyperparametersId = 2;
    string marker = 3;
    int32 maxItems = 4;
}

message ListCheckpointsResponse {
    string modelId = 2;
    string hyperparametersId = 3;
    repeated string checkpointIds = 1;
}

message CreateCheckpointRequest {
    string modelId = 1;
    string hyperparametersId = 2;
    string checkpointId = 3;
    string link = 4;
    map<string, string> info = 5;
}

message CreateCheckpointResponse {
    string resourcePath = 1;
}

message GetCheckpointRequest {
    string modelId = 1;
    string hyperparametersId = 2;
    string checkpointId = 3;
}

message GetCheckpointResponse {
    string resourcePath = 1;
    string link = 2;
    google.protobuf.Timestamp createdAt = 3;
    map<string, string> info = 4;
}

service Repository {
    rpc Healthz(HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/v1/repository/healthz"
        };
    };
    rpc Config(ConfigRequest) returns (ConfigResponse) {
        option (google.api.http) = {
            get: "/v1/repository/config"
        };
    };
    rpc ListModels (ListModelsRequest) returns (ListModelsResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models"
        };
    };
    rpc CreateModel (CreateModelRequest) returns (CreateModelResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models"
            body: "*"
        };
    };
    rpc GetModel (GetModelRequest) returns (GetModelResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}"
        };
    }
    rpc UpdateModel (UpdateModelRequest) returns (UpdateModelResponse) {
        option (google.api.http) = {
            put: "/v1/repository/models/{modelId}"
            body: "*"
        };
    }
    rpc ListHyperparameters(ListHyperparametersRequest) returns (ListHyperparametersResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters"
        };
    }
    rpc CreateHyperparameters(CreateHyperparametersRequest) returns (CreateHyperparametersResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models/{modelId}/hyperparameters"
            body: "*"
        };
    }
    rpc GetHyperparameters(GetHyperparametersRequest) returns (GetHyperparametersResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperparametersId}"
        };
    }
    rpc UpdateHyperparameters(UpdateHyperparametersRequest) returns (UpdateHyperparametersResponse) {
        option (google.api.http) = {
            put: "/v1/repository/models/{modelId}/hyperparameters/{hyperparametersId}"
            body: "*"
        };
    }
    rpc ListCheckpoints(ListCheckpointsRequest) returns (ListCheckpointsResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperparametersId}/checkpoints"
        };
    }
    rpc CreateCheckpoint(CreateCheckpointRequest) returns (CreateCheckpointResponse) {
        option (google.api.http) = {
            post: "/v1/repository/models/{modelId}/hyperparameters/{hyperparametersId}/checkpoints"
            body: "*"
        };
    }
    rpc GetCheckpoint(GetCheckpointRequest) returns (GetCheckpointResponse) {
        option (google.api.http) = {
            get: "/v1/repository/models/{modelId}/hyperparameters/{hyperparametersId}/checkpoints/{checkpointId}"
        };
    }
}
